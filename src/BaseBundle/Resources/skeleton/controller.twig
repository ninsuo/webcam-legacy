<?php

namespace {{ bundle|pascalcase }}\Controller;

use BaseBundle\Base\BaseController;
use {{ bundle }}\Entity\{{ entityName }};
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\Form\Extension\Core\Type;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\Validator\Constraints;

/**
* @Route("/{{ bundleName|kebabcase }}/{{ entityName|kebabcase }}s")
 */
class {{ entityName|pascalcase }}sController extends BaseController
{
    /**
     * @Route("/", name="{{ routePrefix }}")
     * @Template()
     */
    public function listAction(Request $request)
    {
        $form = $this->getCreateForm($request);
        if (is_null($form)) {
            return new RedirectResponse(
                $this->generateUrl('{{ routePrefix }}', $request->query->all())
            );
        }

        $filter = $request->query->get('{{ entityName|kebabcase }}-filter');

        $qb = $this
            ->getManager()
            ->createQueryBuilder()
            ->select('{{ entityPrefix }}')
            ->from({{ entityName }}::class, '{{ entityPrefix }}')
         ;

        if ($filter) {
            $qb
{% set firstColumn = null %}{% set i = 0 %}{% for name, column in columns if name != 'id' %}{% if firstColumn == null %}{% set firstColumn = name %}{% endif %}
                ->{% if i == 0 %}w{% else %}orW{% endif %}here('{{ entityPrefix }}.{{ name }} LIKE :criteria')
{% set i = i + 1 %}
{% endfor %}
                ->setParameter('criteria', '%'.$filter.'%')
            ;
        }

        return [
            'orderBy' => $this->orderBy($qb, {{ entityName }}::class, '{{ entityPrefix }}.{{ firstColumn }}'),
            'pager' => $this->getPager($qb, '{{ entityName|kebabcase }}-'),
            'create' => $form,
        ];
    }

    protected function getCreateForm(Request $request)
    {
        $entity = new {{ entityName }}();

        $form = $this
            ->createNamedFormBuilder('create-{{ entityName|kebabcase }}', Type\FormType::class, $entity)
{% for name, column in columns if name != 'id' %}
            ->add('{{ name }}', Type\TextType::class, [
                'label' => '{{ bundleName|snakecase|lower }}.{{ entityName|snakecase|lower }}.{{ name|snakecase|lower }}',
                'constraints' => [],
            ])
{% endfor %}            ->add('submit', Type\SubmitType::class, [
                'label' => 'base.crud.action.save',
            ])
            ->getForm()
            ->handleRequest($request)
        ;

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->get('doctrine')->getManager();
            $em->persist($entity);
            $em->flush();

            $this->success("{{ bundleName|snakecase|lower }}.{{ entityName|snakecase|lower }}.created");

            return null;
        }

        return $form->createView();
    }

    /**
     * @Route("/delete/{id}/{token}", name="{{ routePrefix }}_delete")
     * @Template()
     */
    public function deleteAction($id, $token, Request $request)
    {
        $this->checkCsrfToken('{{ routePrefix }}', $token);

        $manager = $this->getManager('{{ entity }}');

        $entity = $manager->findOneById($id);
        if (!$entity) {
            throw $this->createNotFoundException();
        }

        $em = $this->get('doctrine')->getManager();
        $em->remove($entity);
        $em->flush();

        $this->success("{{ bundleName|snakecase|lower }}.{{ entityName|snakecase|lower }}.deleted", ['%id%' => $entity->getId()]);

        return $this->redirect($this->generateUrl('{{ routePrefix }}', $request->query->all()));
    }

{% for name, column in columns if name != 'id' %}
    /**
     * @Route("/edit/{{ name|kebabcase }}/{id}", name="_{{ routePrefix }}_edit_{{ name|snakecase|lower }}")
     * @Template("BaseBundle::editOnClick.html.twig")
     */
    public function _edit{{ name|title }}Action(Request $request, $id)
    {
        $manager = $this->getManager('{{ entity }}');

        $entity = $manager->findOneById($id);
        if (!$entity) {
            throw $this->createNotFoundException();
        }

        $endpoint = $this->generateUrl('_{{ routePrefix }}_edit_{{ name|snakecase|lower }}', ['id' => $id]);

        $form = $this
            ->createNamedFormBuilder("edit-{{ entityName|kebabcase }}-{{ name|kebabcase }}-{$id}", Type\FormType::class, $entity, [
                'action' => $endpoint,
            ])
            ->add('{{ name|kebabcase }}', Type\TextType::class, [
                'label' => '{{ bundleName|snakecase|lower }}.{{ entityName|snakecase|lower }}.{{ name|snakecase|lower }}',
                'constraints' => [],
            ])
            ->add('submit', Type\SubmitType::class, [
                'label' => 'base.crud.action.save',
                'attr' => [
                    'class' => 'domajax',
                ],
            ])
            ->getForm()
            ->handleRequest($request)
        ;

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->get('doctrine')->getManager();
            $em->persist($entity);
            $em->flush();

            return [
                'text' => $entity->get{{ name|pascalcase }}(),
                'endpoint' => $endpoint,
            ];
        }

        return [
            'form' => $form->createView(),
        ];
    }

{% endfor %}
}
